<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.sproject.dao.board.PostDao">
<select id="selectListPostOfBoard" parameterType="com.example.sproject.model.board.Post" resultType="com.example.sproject.model.board.Post">
	<![CDATA[
		select *
		from (select rownum rn, a.*
			  from (select p.*, b.bd_name, m.m_name, ps.pt_name FROM post p inner join board b on(p.bd_num = b.bd_num) inner join member m on(p.m_id = m.m_id)  inner join position ps on(m.pt_code = ps.pt_code) 
        WHERE b.BD_TYPE in (1,2) and p.p_type = 2 order by p_num desc) 
			  a) where rn >= #{start} and rn <= #{end}

	]]>	
</select>

<select id="PostTotalOfBoard" resultType="int">
		select count(*) FROM post p inner join board b on(p.bd_num = b.bd_num) WHERE b.BD_TYPE in (1,2)
	</select>
  <insert id="PostInsertOfBoard" parameterType="com.example.sproject.model.board.Post">
	INSERT INTO post (p_num, bd_num, m_id, p_name, p_content,p_view, p_type, p_regdate) VALUES (
	(SELECT NVL(MAX(p_num)+1, 1) FROM post), #{bd_num}, #{m_id}, #{p_name}, #{p_content}, 0, #{p_type}, SYSDATE)
   </insert>
<!--  게시물 상세조회 -->
    <select id="PostReadOfBoard" parameterType="int" resultType="com.example.sproject.model.board.Post">
        SELECT * FROM post
        WHERE p_num = #{p_num}
    </select>
        <!-- 게시글 조회수 증가처리 -->
    <update id="PostincreaseViewcntOfBoard" parameterType="int">
        UPDATE post SET p_view = p_view + 1 
        WHERE p_num = #{p_num}
    </update>
      <!-- 05. 게시글 수정처리 -->
    <update id="PostUpdateOfBoard"  parameterType="com.example.sproject.model.board.Post">
        UPDATE post SET
            p_name = #{p_name},
            p_content = #{p_content},
            m_id = #{m_id}
        WHERE p_num = #{p_num}
    </update>
    <delete id="PostDeleteOfBoard" parameterType="int">
    delete from post where p_num = #{p_num}
    </delete>
     <delete id="PostLikeDeleteOfBoard" parameterType="int">
    delete from post_like where p_num = #{p_num}
    </delete>
<!--     게시판 리스트  -->

<select id="selectListBoardOfBoard" parameterType="com.example.sproject.model.board.Board" resultType="com.example.sproject.model.board.Board">
		select *
		from board 
</select>


<select id="maxBoardType" parameterType="com.example.sproject.model.board.Board" resultType="com.example.sproject.model.board.Board">
		select max(bd_type)
		from board
</select>

<select id="selectListTypedofBoard" parameterType="int" resultType="com.example.sproject.model.board.Board">
		select *
		from board where bd_type = #{bd_type}
</select>

<!--     댓글 리스트  -->
<select id="ReplyListofBoard" parameterType="int" resultType="com.example.sproject.model.board.Reply">
		select m.m_id, m.m_name, p.pt_name, r.* 
		from reply r, member m, position p
		where r.p_num = #{p_num} and r.m_id = m.m_id and p.pt_code = m.pt_code 
		order by r.rp_ref, r.rp_order, r.rp_depth
</select>
<!-- 댓글 추가 -->
  <insert id="ReplyInsertOfBoard" parameterType="com.example.sproject.model.board.Reply">
	INSERT INTO REPLY (p_num, rp_num, m_id, rp_content, rp_ref, rp_order, rp_depth )
	VALUES (#{p_num}, #{rp_num}, #{m_id}, #{rp_content}, #{rp_num}, 1, 1)
   </insert>
   
<!--    댓글 추가를 위해 가장 큰 댓글 번호 가져오기 -->
   <select id="selectOneMaxRp_num" resultType="int">
   	SELECT NVL(MAX(rp_num),0) FROM reply
   </select>
<!--    댓글 삭제하기 -->
 <delete id="Reply_DeleteOfBoard" parameterType="int">
    delete from reply where rp_num= #{rp_num}
    </delete>
<!--     부모 댓글번호를 가지고 부모 댓글정보 가져오기(부모 댓글의 ref, order, depth)  -->
	<select id="selectOneParentOfBoard" parameterType="com.example.sproject.model.board.Reply" resultType="com.example.sproject.model.board.Reply">
	<![CDATA[
		SELECT * FROM reply WHERE p_num = #{p_num} AND rp_num = #{parent_rp_num} 
 	]]>	 
	</select>
<!-- 	삽입될 위치의 order값 찾기 -->
	<select id="selectOneInsertedRp_orderOfBoard" parameterType="com.example.sproject.model.board.Reply" resultType="int">
	<![CDATA[
		SELECT NVL(MIN(rp_order),-1) FROM reply 
		WHERE	(p_num = #{p_num} AND rp_ref = #{rp_ref}) AND 
				(rp_order > #{parent_rp_order} AND rp_depth <= #{parent_rp_depth})
	]]>	
	</select>
<!-- 	삽입될 위치의 order값 앞에서 못찾았을 때 해당 ref에서의 최대 order값 찾기 -->
	<select id="selectOneMaxRp_orderOfBoard" parameterType="com.example.sproject.model.board.Reply" resultType="int">
	<![CDATA[
		SELECT MAX(rp_order) FROM reply WHERE (p_num = #{p_num} AND rp_ref = #{rp_ref})
	]]>	
	</select>
	
<!--      위에 2개가 삽입될 위치의 order값 찾는데 사용 -->
	
<!-- 	  삽입될 order값 찾은 뒤에 삽입될 댓글 뒤 댓글들의 order 값들 1칸씩 밀기  -->
	<update id="pushRp_orderOfBoard" parameterType="com.example.sproject.model.board.Reply">
	<![CDATA[
		UPDATE reply SET rp_order = rp_order + 1 WHERE (p_num = #{p_num} AND rp_ref = #{rp_ref}) AND rp_order >= #{rp_order}
	]]>
	</update>
	
<!-- 	삽입될 댓글의 댓글번호 찾기 -->
	<select id="selectOneMaxRp_numOfBoard" parameterType="String" resultType="int">
	<![CDATA[
		SELECT MAX(rp_num) FROM reply 
	]]>	
	</select>
	
<!-- 	댓글 삽입하기 -->
	<insert id="insertRereplyOfBoard" parameterType="com.example.sproject.model.board.Reply">
	<![CDATA[
		INSERT INTO reply
		(p_num, rp_num, rp_content, m_id, rp_ref, rp_order, rp_depth)
		VALUES
		(#{p_num}, #{rp_num}, #{rp_content}, #{m_id}, #{rp_ref}, #{rp_order}, #{rp_depth})
	]]>
	</insert>
<!-- 	좋아요 기능 -->
	<select id="checkLikeOfBoard" parameterType="com.example.sproject.model.board.PostLike" resultType="int">
		SELECT COUNT(*) FROM post_like WHERE p_num = #{p_num} AND m_id = #{m_id}
	</select>
	
	<insert id="insertLikeOfBoard" parameterType="com.example.sproject.model.board.PostLike">
		insert into post_like(p_num, m_id ) values(#{p_num},#{m_id})
	</insert>
	
	<delete id="deleteLikeOfBoard" parameterType="com.example.sproject.model.board.PostLike">
	delete from post_like where p_num= #{p_num} and m_id=#{m_id}
	</delete>
	
	<select id="board_list_totalOfBoard" parameterType="int" resultType="int">
		SELECT COUNT(*) FROM post where bd_num = #{bd_num}
	</select>
	
 	<select id="selectBoard_ListOfBoard" parameterType="com.example.sproject.model.board.Post" resultType="com.example.sproject.model.board.Post"> 
	<![CDATA[
			select * 
		from (select rownum rn, a.*  
 			  from (
          select p.*, m.m_name, ps.pt_name from post p , member m, position ps where bd_num=#{bd_num} and p.m_id = m.m_id and m.pt_code = ps.pt_code 
          order by p_num) a) where rn >= #{start} and rn <= #{end}
 	]]>	  
 </select> 
	
<!-- 	공지 보여주기 -->
	<select id="selectListPost_ofBoard" parameterType="int" resultType="com.example.sproject.model.board.Post">
		select *
		from post p, member m, position ps where p_type = #{p_type} and p.m_id = m.m_id and ps.pt_code = m.pt_code order by p_num desc
	</select> 
	<update id="selectBoardGroupOfBoard" parameterType="Map">
		UPDATE post SET bd_num = #{bd_num}  WHERE p_num = #{p_num}
	</update>
	<delete id="DeleteBoardGroupOfBoard" parameterType="int">
		delete from post where p_num= #{p_num}
	</delete>
	
		<update id="boardNoticeGroupOfBoard" parameterType="int">
		UPDATE post SET p_type = 1  WHERE p_num = #{p_num}
	</update>
	<select id="searchTotalOfBoard" parameterType="com.example.sproject.model.board.Post" resultType="int">
	<![CDATA[
		select count(*) from post where p_name = #{p_name}

	]]>
	</select>
		<select id="searchListOfBoard" parameterType="com.example.sproject.model.board.Post" resultType="com.example.sproject.model.board.Post">
	<![CDATA[
			select p_num, bd_num, m_id, rp_content from post where WHERE p_num = #{p_num} order by p_num desc, p_regdate desc 
	]]>
	</select>
	<!-- 01_01. 게시글 전체목록 조회 및 검색 조회까지 -->
<select id="boardlistAllOfBoard" resultType="com.example.sproject.model.board.Post">
    SELECT p_num, bd_num, m_id, p_name, p_content,p_view, p_type, p_regdate 
    FROM post
    <!-- WHERE절을 include 태그로 삽입 -->
    <include refid="search"></include>
    ORDER BY p_num desc, p_regdate desc
    
</select>
<!-- 댓글삭제 후 게시글 삭제-->
 	<delete id="Post_ReplydeleteOfBoard" parameterType="int">
		delete from reply where p_num= #{p_num}
	</delete>
	
<!-- 	좋아요삭제 후 게시글 삭제 -->
	<delete id="PostLike_DeleteOfBoard" parameterType="int">
		delete from post_like where p_num= #{p_num}
	</delete>
	
<!-- 01_02. 게시글 레코드 갯수 -->
<select id="boardcountArticleOfBoard" resultType="int">
    SELECT COUNT(*) FROM post
    <!-- WHERE절을 include 태그로 삽입 -->
    <include refid="search"></include>
</select>
 
<!-- sql code 조각 -->
<!-- 반복되는 sql의 일부를 sql태그를 이용하여 따로 빼둘수 있다. -->
<sql id="search">
    <choose>
        <!-- 검색옵션이 전체 검색일 경우 -->
        <when test="searchOption == 'all'">
            WHERE m_id like '%'||#{keyword}||'%'
            OR p_content like '%'||#{keyword}||'%'
            OR p_name like '%'||#{keyword}||'%'
        </when>
        <!-- 전체 검색이 아닐 경우 -->
        <otherwise>
            WHERE ${searchOption} like '%'||#{keyword}||'%'
        </otherwise>
    </choose>
</sql>

	
 </mapper>